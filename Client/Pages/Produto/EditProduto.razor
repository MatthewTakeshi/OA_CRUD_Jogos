@page  "/Produto/EditJogos"
@page "/Produto/EditJogos/{Item}"
@using System.Net.Http
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="card m-3">
    <h4 class="card-header">Atualizar Produto</h4>
    <div class="card-body">
        <EditForm Model="@Joguinho" OnValidSubmit="HandleValidSubmit" @onreset="HandleReset">
            <DataAnnotationsValidator />
            <div class="form-row">
                <div class="form-group col-5">
                    <label>ID</label>
                    <InputNumber @bind-Value="Joguinho.ID" class="form-control" />
                    <ValidationMessage For="@(() => Joguinho.ID)" />
                </div>
                <div class="form-group col-5">
                    <label>Nome</label>
                    <InputText @bind-Value="Joguinho.Nome" class="form-control" />
                    <ValidationMessage For="@(() => Joguinho.Nome)" />
                </div>
            </div>
            <div class="text-center">
                <button type="submit" class="btn btn-primary mr-1">Salvar</button>
                <button type="reset" class="btn btn-secondary">Cancelar</button>
            </div>
        </EditForm>
    </div>
</div>

@code {

    private Jogo Joguinho = new Jogo();
    private EditContext editContext { get; set; }

    [Parameter]
    public string Item { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var itemId = Item;
        Joguinho = await Http.GetFromJsonAsync<Jogo>($"/Jogo/GetById?id={itemId}");
        editContext = new EditContext(Joguinho);
    }

    private async Task HandleValidSubmit()
    {
        //Enviar dados para o Controller no Backend
        var teste = await Http.PutAsJsonAsync("/Jogo/Update", Joguinho);
        NavigationManager.NavigateTo("Produto/ListJogos");
    }

    private void HandleReset()
    {
        Joguinho = new Jogo();
        editContext = new EditContext(Joguinho);
    }
}